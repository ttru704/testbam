//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KPIEntities : DbContext
    {
        public KPIEntities()
            : base("name=KPIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Audit_Log> Audit_Log { get; set; }
        public virtual DbSet<Branch_Profile> Branch_Profile { get; set; }
        public virtual DbSet<Branch_Types> Branch_Types { get; set; }
        public virtual DbSet<Business_Types> Business_Types { get; set; }
        public virtual DbSet<Category_Types> Category_Types { get; set; }
        public virtual DbSet<Client_Profile> Client_Profile { get; set; }
        public virtual DbSet<Company_Profile> Company_Profile { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Key_Performance_Indexes> Key_Performance_Indexes { get; set; }
        public virtual DbSet<KPI_For_Business> KPI_For_Business { get; set; }
        public virtual DbSet<KPI_For_Company> KPI_For_Company { get; set; }
        public virtual DbSet<KPI_For_User> KPI_For_User { get; set; }
        public virtual DbSet<KPI_Types> KPI_Types { get; set; }
        public virtual DbSet<Param> Params { get; set; }
        public virtual DbSet<Product_Profile> Product_Profile { get; set; }
        public virtual DbSet<Staff_Profile> Staff_Profile { get; set; }
        public virtual DbSet<Staff_Types> Staff_Types { get; set; }
        public virtual DbSet<Subject_Profile> Subject_Profile { get; set; }
        public virtual DbSet<Subject_Types> Subject_Types { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Table_Map> Table_Map { get; set; }
        public virtual DbSet<Transaction_Items> Transaction_Items { get; set; }
        public virtual DbSet<Transaction_Summary> Transaction_Summary { get; set; }
        public virtual DbSet<User_Profile> User_Profile { get; set; }
        public virtual DbSet<Connection_Profile> Connection_Profile { get; set; }
    
        public virtual ObjectResult<usp_AnimalsSeenBranch_Result> usp_AnimalsSeenBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenBranch_Result>("usp_AnimalsSeenBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenByEmployeeCompany_Result> usp_AnimalsSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenByEmployeeCompany_Result>("usp_AnimalsSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AnimalsSeenChanges(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AnimalsSeenChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenCompany_Result> usp_AnimalsSeenCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenCompany_Result>("usp_AnimalsSeenCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenIndustry_Result> usp_AnimalsSeenIndustry(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> branchRef, Nullable<int> size, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenIndustry_Result>("usp_AnimalsSeenIndustry", startParameter, endParameter, branchRefParameter, sizeParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AnimalsSeenSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AnimalsSeenSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgCustomersSeenByEmployeeCompany_Result> usp_AvgCustomersSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgCustomersSeenByEmployeeCompany_Result>("usp_AvgCustomersSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerBranch_Result> usp_AvgDollarPerCustomerBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerBranch_Result>("usp_AvgDollarPerCustomerBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerCustomerChanges(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerCustomerChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerCompany_Result> usp_AvgDollarPerCustomerCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerCompany_Result>("usp_AvgDollarPerCustomerCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerCustomerSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerCustomerSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionBranch_Result> usp_AvgDollarPerTransactionBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionBranch_Result>("usp_AvgDollarPerTransactionBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerTransactionChanges(Nullable<int> companyref)
        {
            var companyrefParameter = companyref.HasValue ?
                new ObjectParameter("companyref", companyref) :
                new ObjectParameter("companyref", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerTransactionChanges", companyrefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionCompany_Result> usp_AvgDollarPerTransactionCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionCompany_Result>("usp_AvgDollarPerTransactionCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerTransactionSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerTransactionSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_BranchDropDownList_Result> usp_BranchDropDownList(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchDropDownList_Result>("usp_BranchDropDownList", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_CustomersSeenByEmployeeCompany_Result> usp_CustomersSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersSeenByEmployeeCompany_Result>("usp_CustomersSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByEmployeeCompany_Result> usp_IncomeByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timetype)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timetypeParameter = timetype.HasValue ?
                new ObjectParameter("Timetype", timetype) :
                new ObjectParameter("Timetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByEmployeeCompany_Result>("usp_IncomeByEmployeeCompany", startParameter, endParameter, companyRefParameter, timetypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByProductCategoryCompany_Result> usp_IncomeByProductCategoryCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByProductCategoryCompany_Result>("usp_IncomeByProductCategoryCompany", startParameter, endParameter, companyRefParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByServiceActivityCompany_Result> usp_IncomeByServiceActivityCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByServiceActivityCompany_Result>("usp_IncomeByServiceActivityCompany", startParameter, endParameter, companyRefParameter);
        }
    
        public virtual ObjectResult<usp_LargeAnimalsBranch_Result> usp_LargeAnimalsBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LargeAnimalsBranch_Result>("usp_LargeAnimalsBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_LargeAnimalsCompany_Result> usp_LargeAnimalsCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LargeAnimalsCompany_Result>("usp_LargeAnimalsCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_NewCustomersBranch_Result> usp_NewCustomersBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewCustomersBranch_Result>("usp_NewCustomersBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_NewCustomersChanges(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_NewCustomersChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_NewCustomersCompany_Result> usp_NewCustomersCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewCustomersCompany_Result>("usp_NewCustomersCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_NewCustomersSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_NewCustomersSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_RetailOnlySalesBranch_Result> usp_RetailOnlySalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetailOnlySalesBranch_Result>("usp_RetailOnlySalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_RetailOnlySalesCompany_Result> usp_RetailOnlySalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetailOnlySalesCompany_Result>("usp_RetailOnlySalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_ServiceOnlySalesBranch_Result> usp_ServiceOnlySalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceOnlySalesBranch_Result>("usp_ServiceOnlySalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_ServiceOnlySalesCompany_Result> usp_ServiceOnlySalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceOnlySalesCompany_Result>("usp_ServiceOnlySalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_SmallAnimalsBranch_Result> usp_SmallAnimalsBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SmallAnimalsBranch_Result>("usp_SmallAnimalsBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_SmallAnimalsCompany_Result> usp_SmallAnimalsCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SmallAnimalsCompany_Result>("usp_SmallAnimalsCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_TotalSalesBranch_Result> usp_TotalSalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TotalSalesBranch_Result>("usp_TotalSalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_TotalSalesChanges(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_TotalSalesChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_TotalSalesCompany_Result> usp_TotalSalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TotalSalesCompany_Result>("usp_TotalSalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_TotalSalesSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_TotalSalesSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_TransExcludeZeroTotalBranch_Result> usp_TransExcludeZeroTotalBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransExcludeZeroTotalBranch_Result>("usp_TransExcludeZeroTotalBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_TransExcludeZeroTotalCompany_Result> usp_TransExcludeZeroTotalCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransExcludeZeroTotalCompany_Result>("usp_TransExcludeZeroTotalCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_UniqueCustomersSeenBranch_Result> usp_UniqueCustomersSeenBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UniqueCustomersSeenBranch_Result>("usp_UniqueCustomersSeenBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_UniqueCustomersSeenChanges(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_UniqueCustomersSeenChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_UniqueCustomersSeenCompany_Result> usp_UniqueCustomersSeenCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UniqueCustomersSeenCompany_Result>("usp_UniqueCustomersSeenCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_UniqueCustomersSeenIndustry_Result> usp_UniqueCustomersSeenIndustry(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UniqueCustomersSeenIndustry_Result>("usp_UniqueCustomersSeenIndustry", startParameter, endParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_UniqueCustomersSeenSingle(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_UniqueCustomersSeenSingle", companyRefParameter);
        }
    }
}
