//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KPIEntities : DbContext
    {
        public KPIEntities()
            : base("name=KPIEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Audit_Log> Audit_Log { get; set; }
        public virtual DbSet<Branch_Profile> Branch_Profile { get; set; }
        public virtual DbSet<Branch_Types> Branch_Types { get; set; }
        public virtual DbSet<Business_Types> Business_Types { get; set; }
        public virtual DbSet<Category_Types> Category_Types { get; set; }
        public virtual DbSet<Client_Profile> Client_Profile { get; set; }
        public virtual DbSet<Company_Profile> Company_Profile { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<Country_Profile> Country_Profile { get; set; }
        public virtual DbSet<Key_Performance_Indexes> Key_Performance_Indexes { get; set; }
        public virtual DbSet<KPI_For_Business> KPI_For_Business { get; set; }
        public virtual DbSet<KPI_For_Company> KPI_For_Company { get; set; }
        public virtual DbSet<KPI_For_User> KPI_For_User { get; set; }
        public virtual DbSet<KPI_Types> KPI_Types { get; set; }
        public virtual DbSet<Param> Params { get; set; }
        public virtual DbSet<Product_Profile> Product_Profile { get; set; }
        public virtual DbSet<Region_Profile> Region_Profile { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Staff_Profile> Staff_Profile { get; set; }
        public virtual DbSet<Staff_Types> Staff_Types { get; set; }
        public virtual DbSet<State_Profile> State_Profile { get; set; }
        public virtual DbSet<Subject_Profile> Subject_Profile { get; set; }
        public virtual DbSet<Subject_Types> Subject_Types { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Table_Map> Table_Map { get; set; }
        public virtual DbSet<Transaction_Items> Transaction_Items { get; set; }
        public virtual DbSet<Transaction_Summary> Transaction_Summary { get; set; }
        public virtual DbSet<User_Claims> User_Claims { get; set; }
        public virtual DbSet<User_Logins> User_Logins { get; set; }
        public virtual DbSet<User_Profile> User_Profile { get; set; }
        public virtual DbSet<User_Roles> User_Roles { get; set; }
        public virtual DbSet<Connection_Profile> Connection_Profile { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenBranch_Result> usp_AnimalsSeenBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenBranch_Result>("usp_AnimalsSeenBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenByEmployeeCompany_Result> usp_AnimalsSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenByEmployeeCompany_Result>("usp_AnimalsSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenByEmployeeIndividual_Result> usp_AnimalsSeenByEmployeeIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> staffNumber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var staffNumberParameter = staffNumber.HasValue ?
                new ObjectParameter("staffNumber", staffNumber) :
                new ObjectParameter("staffNumber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenByEmployeeIndividual_Result>("usp_AnimalsSeenByEmployeeIndividual", startParameter, endParameter, companyRefParameter, staffNumberParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AnimalsSeenChanges(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AnimalsSeenChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AnimalsSeenCompany_Result> usp_AnimalsSeenCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AnimalsSeenCompany_Result>("usp_AnimalsSeenCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AnimalsSeenSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AnimalsSeenSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgAnimalsSeenByEmployeeCompany_Result> usp_AvgAnimalsSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgAnimalsSeenByEmployeeCompany_Result>("usp_AvgAnimalsSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AvgCustomersSeenByEmployeeCompany_Result> usp_AvgCustomersSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgCustomersSeenByEmployeeCompany_Result>("usp_AvgCustomersSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerBranch_Result> usp_AvgDollarPerCustomerBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerBranch_Result>("usp_AvgDollarPerCustomerBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerCustomerChanges(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerCustomerChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerCompany_Result> usp_AvgDollarPerCustomerCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerCompany_Result>("usp_AvgDollarPerCustomerCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerPeer_Result> usp_AvgDollarPerCustomerPeer(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> branchRef, Nullable<long> branchType, Nullable<int> timeType, Nullable<long> country, Nullable<long> state, Nullable<long> region)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var branchTypeParameter = branchType.HasValue ?
                new ObjectParameter("branchType", branchType) :
                new ObjectParameter("branchType", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerPeer_Result>("usp_AvgDollarPerCustomerPeer", startParameter, endParameter, branchRefParameter, branchTypeParameter, timeTypeParameter, countryParameter, stateParameter, regionParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerCustomerPeerGrid_Result> usp_AvgDollarPerCustomerPeerGrid(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<long> branchType, Nullable<int> timeType, Nullable<long> country, Nullable<long> state, Nullable<long> region)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var branchTypeParameter = branchType.HasValue ?
                new ObjectParameter("branchType", branchType) :
                new ObjectParameter("branchType", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerCustomerPeerGrid_Result>("usp_AvgDollarPerCustomerPeerGrid", startParameter, endParameter, companyRefParameter, branchRefParameter, branchTypeParameter, timeTypeParameter, countryParameter, stateParameter, regionParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerCustomerSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerCustomerSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionBranch_Result> usp_AvgDollarPerTransactionBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionBranch_Result>("usp_AvgDollarPerTransactionBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerTransactionChanges(Nullable<long> companyref)
        {
            var companyrefParameter = companyref.HasValue ?
                new ObjectParameter("companyref", companyref) :
                new ObjectParameter("companyref", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerTransactionChanges", companyrefParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionCompany_Result> usp_AvgDollarPerTransactionCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionCompany_Result>("usp_AvgDollarPerTransactionCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionPeer_Result> usp_AvgDollarPerTransactionPeer(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> branchRef, Nullable<long> branchType, Nullable<int> timeType, Nullable<long> country, Nullable<long> state, Nullable<long> region)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var branchTypeParameter = branchType.HasValue ?
                new ObjectParameter("branchType", branchType) :
                new ObjectParameter("branchType", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionPeer_Result>("usp_AvgDollarPerTransactionPeer", startParameter, endParameter, branchRefParameter, branchTypeParameter, timeTypeParameter, countryParameter, stateParameter, regionParameter);
        }
    
        public virtual ObjectResult<usp_AvgDollarPerTransactionPeerGrid_Result> usp_AvgDollarPerTransactionPeerGrid(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<long> branchType, Nullable<int> timeType, Nullable<long> country, Nullable<long> state, Nullable<long> region)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var branchTypeParameter = branchType.HasValue ?
                new ObjectParameter("branchType", branchType) :
                new ObjectParameter("branchType", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(long));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(long));
    
            var regionParameter = region.HasValue ?
                new ObjectParameter("region", region) :
                new ObjectParameter("region", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_AvgDollarPerTransactionPeerGrid_Result>("usp_AvgDollarPerTransactionPeerGrid", startParameter, endParameter, companyRefParameter, branchRefParameter, branchTypeParameter, timeTypeParameter, countryParameter, stateParameter, regionParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_AvgDollarPerTransactionSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_AvgDollarPerTransactionSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_BranchDropDownList_Result> usp_BranchDropDownList(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchDropDownList_Result>("usp_BranchDropDownList", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_BranchTypeDropDownList_Result> usp_BranchTypeDropDownList(Nullable<int> businessType)
        {
            var businessTypeParameter = businessType.HasValue ?
                new ObjectParameter("businessType", businessType) :
                new ObjectParameter("businessType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_BranchTypeDropDownList_Result>("usp_BranchTypeDropDownList", businessTypeParameter);
        }
    
        public virtual ObjectResult<usp_CompanyList_Result> usp_CompanyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CompanyList_Result>("usp_CompanyList");
        }
    
        public virtual ObjectResult<usp_CountryDropDownList_Result> usp_CountryDropDownList(Nullable<long> branchRef)
        {
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CountryDropDownList_Result>("usp_CountryDropDownList", branchRefParameter);
        }
    
        public virtual ObjectResult<usp_CustomersSeenByEmployeeCompany_Result> usp_CustomersSeenByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersSeenByEmployeeCompany_Result>("usp_CustomersSeenByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_CustomersSeenByEmployeeIndividual_Result> usp_CustomersSeenByEmployeeIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> staffNumber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var staffNumberParameter = staffNumber.HasValue ?
                new ObjectParameter("staffNumber", staffNumber) :
                new ObjectParameter("staffNumber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_CustomersSeenByEmployeeIndividual_Result>("usp_CustomersSeenByEmployeeIndividual", startParameter, endParameter, companyRefParameter, staffNumberParameter, timeTypeParameter);
        }
    
        public virtual int usp_DeleteFromKpiForCompany(Nullable<long> kpiRef, Nullable<long> companyRef)
        {
            var kpiRefParameter = kpiRef.HasValue ?
                new ObjectParameter("kpiRef", kpiRef) :
                new ObjectParameter("kpiRef", typeof(long));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteFromKpiForCompany", kpiRefParameter, companyRefParameter);
        }
    
        public virtual int usp_DeleteFromKpiForUser(Nullable<int> kpiRef, string userRef)
        {
            var kpiRefParameter = kpiRef.HasValue ?
                new ObjectParameter("kpiRef", kpiRef) :
                new ObjectParameter("kpiRef", typeof(int));
    
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DeleteFromKpiForUser", kpiRefParameter, userRefParameter);
        }
    
        public virtual ObjectResult<usp_EmployeeSearchBox_Result> usp_EmployeeSearchBox(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_EmployeeSearchBox_Result>("usp_EmployeeSearchBox", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_GetAllUserAccessInfo_Result> usp_GetAllUserAccessInfo(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetAllUserAccessInfo_Result>("usp_GetAllUserAccessInfo", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_GetCompanyAccessDetail_Result> usp_GetCompanyAccessDetail(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCompanyAccessDetail_Result>("usp_GetCompanyAccessDetail", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_GetKpiTypes_Result> usp_GetKpiTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetKpiTypes_Result>("usp_GetKpiTypes");
        }
    
        public virtual ObjectResult<usp_GetUserInfo_Result> usp_GetUserInfo(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserInfo_Result>("usp_GetUserInfo", userNameParameter);
        }
    
        public virtual ObjectResult<string> usp_GetUserName(string userRef)
        {
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetUserName", userRefParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByEmployeeCompany_Result> usp_IncomeByEmployeeCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByEmployeeCompany_Result>("usp_IncomeByEmployeeCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByEmployeeIndividual_Result> usp_IncomeByEmployeeIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> staffNumber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var staffNumberParameter = staffNumber.HasValue ?
                new ObjectParameter("staffNumber", staffNumber) :
                new ObjectParameter("staffNumber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByEmployeeIndividual_Result>("usp_IncomeByEmployeeIndividual", startParameter, endParameter, companyRefParameter, staffNumberParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByProductCategoryCompany_Result> usp_IncomeByProductCategoryCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByProductCategoryCompany_Result>("usp_IncomeByProductCategoryCompany", startParameter, endParameter, companyRefParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByProductIndividual_Result> usp_IncomeByProductIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> productNumnber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var productNumnberParameter = productNumnber.HasValue ?
                new ObjectParameter("productNumnber", productNumnber) :
                new ObjectParameter("productNumnber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByProductIndividual_Result>("usp_IncomeByProductIndividual", startParameter, endParameter, companyRefParameter, productNumnberParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByServiceActivityCompany_Result> usp_IncomeByServiceActivityCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByServiceActivityCompany_Result>("usp_IncomeByServiceActivityCompany", startParameter, endParameter, companyRefParameter);
        }
    
        public virtual ObjectResult<usp_IncomeByServiceIndividual_Result> usp_IncomeByServiceIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> productNumnber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var productNumnberParameter = productNumnber.HasValue ?
                new ObjectParameter("productNumnber", productNumnber) :
                new ObjectParameter("productNumnber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeByServiceIndividual_Result>("usp_IncomeByServiceIndividual", startParameter, endParameter, companyRefParameter, productNumnberParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_IncomeFromAnimalTypeEmployeeIndividual_Result> usp_IncomeFromAnimalTypeEmployeeIndividual(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> staffNumber, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var staffNumberParameter = staffNumber.HasValue ?
                new ObjectParameter("staffNumber", staffNumber) :
                new ObjectParameter("staffNumber", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_IncomeFromAnimalTypeEmployeeIndividual_Result>("usp_IncomeFromAnimalTypeEmployeeIndividual", startParameter, endParameter, companyRefParameter, staffNumberParameter, timeTypeParameter);
        }
    
        public virtual int usp_InsertIntoKpiForCompany(Nullable<long> kpiRef, Nullable<long> companyRef)
        {
            var kpiRefParameter = kpiRef.HasValue ?
                new ObjectParameter("kpiRef", kpiRef) :
                new ObjectParameter("kpiRef", typeof(long));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertIntoKpiForCompany", kpiRefParameter, companyRefParameter);
        }
    
        public virtual int usp_InsertIntoKpiForUser(Nullable<int> kpiRef, string userRef)
        {
            var kpiRefParameter = kpiRef.HasValue ?
                new ObjectParameter("kpiRef", kpiRef) :
                new ObjectParameter("kpiRef", typeof(int));
    
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertIntoKpiForUser", kpiRefParameter, userRefParameter);
        }
    
        public virtual ObjectResult<usp_KPIForCompanyList_Result> usp_KPIForCompanyList(Nullable<int> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_KPIForCompanyList_Result>("usp_KPIForCompanyList", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_KPIListForCompany_Result> usp_KPIListForCompany(Nullable<long> companyRef, Nullable<long> businessType, Nullable<int> kpiType)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var businessTypeParameter = businessType.HasValue ?
                new ObjectParameter("businessType", businessType) :
                new ObjectParameter("businessType", typeof(long));
    
            var kpiTypeParameter = kpiType.HasValue ?
                new ObjectParameter("kpiType", kpiType) :
                new ObjectParameter("kpiType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_KPIListForCompany_Result>("usp_KPIListForCompany", companyRefParameter, businessTypeParameter, kpiTypeParameter);
        }
    
        public virtual ObjectResult<usp_KPIListForUser_Result> usp_KPIListForUser(Nullable<int> companyRef, string userRef, Nullable<int> kpiType)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(int));
    
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            var kpiTypeParameter = kpiType.HasValue ?
                new ObjectParameter("kpiType", kpiType) :
                new ObjectParameter("kpiType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_KPIListForUser_Result>("usp_KPIListForUser", companyRefParameter, userRefParameter, kpiTypeParameter);
        }
    
        public virtual ObjectResult<usp_LargeAnimalsBranch_Result> usp_LargeAnimalsBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LargeAnimalsBranch_Result>("usp_LargeAnimalsBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_LargeAnimalsBranchTest_Result> usp_LargeAnimalsBranchTest(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LargeAnimalsBranchTest_Result>("usp_LargeAnimalsBranchTest", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_LargeAnimalsCompany_Result> usp_LargeAnimalsCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_LargeAnimalsCompany_Result>("usp_LargeAnimalsCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_MissedCharge_Result> usp_MissedCharge(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<long> firstProduct, Nullable<long> secondProduct)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var firstProductParameter = firstProduct.HasValue ?
                new ObjectParameter("firstProduct", firstProduct) :
                new ObjectParameter("firstProduct", typeof(long));
    
            var secondProductParameter = secondProduct.HasValue ?
                new ObjectParameter("secondProduct", secondProduct) :
                new ObjectParameter("secondProduct", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MissedCharge_Result>("usp_MissedCharge", startParameter, endParameter, companyRefParameter, branchRefParameter, firstProductParameter, secondProductParameter);
        }
    
        public virtual ObjectResult<usp_NewCustomersBranch_Result> usp_NewCustomersBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewCustomersBranch_Result>("usp_NewCustomersBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_NewCustomersChanges(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_NewCustomersChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_NewCustomersCompany_Result> usp_NewCustomersCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_NewCustomersCompany_Result>("usp_NewCustomersCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_NewCustomersSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_NewCustomersSingle", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_ProductServiceNameSearchBox_Result> usp_ProductServiceNameSearchBox(Nullable<long> companyRef, string @class)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ProductServiceNameSearchBox_Result>("usp_ProductServiceNameSearchBox", companyRefParameter, classParameter);
        }
    
        public virtual ObjectResult<usp_RegionDropDownList_Result> usp_RegionDropDownList(Nullable<long> stateRef)
        {
            var stateRefParameter = stateRef.HasValue ?
                new ObjectParameter("stateRef", stateRef) :
                new ObjectParameter("stateRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RegionDropDownList_Result>("usp_RegionDropDownList", stateRefParameter);
        }
    
        public virtual ObjectResult<usp_RetailOnlySalesBranch_Result> usp_RetailOnlySalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetailOnlySalesBranch_Result>("usp_RetailOnlySalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_RetailOnlySalesCompany_Result> usp_RetailOnlySalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_RetailOnlySalesCompany_Result>("usp_RetailOnlySalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_ServiceOnlySalesBranch_Result> usp_ServiceOnlySalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceOnlySalesBranch_Result>("usp_ServiceOnlySalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_ServiceOnlySalesCompany_Result> usp_ServiceOnlySalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ServiceOnlySalesCompany_Result>("usp_ServiceOnlySalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_SmallAnimalsBranch_Result> usp_SmallAnimalsBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SmallAnimalsBranch_Result>("usp_SmallAnimalsBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_SmallAnimalsCompany_Result> usp_SmallAnimalsCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SmallAnimalsCompany_Result>("usp_SmallAnimalsCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_StateDropDownList_Result> usp_StateDropDownList(Nullable<long> countryRef)
        {
            var countryRefParameter = countryRef.HasValue ?
                new ObjectParameter("countryRef", countryRef) :
                new ObjectParameter("countryRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_StateDropDownList_Result>("usp_StateDropDownList", countryRefParameter);
        }
    
        public virtual ObjectResult<usp_TotalSalesBranch_Result> usp_TotalSalesBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TotalSalesBranch_Result>("usp_TotalSalesBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_TotalSalesChanges(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_TotalSalesChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_TotalSalesCompany_Result> usp_TotalSalesCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TotalSalesCompany_Result>("usp_TotalSalesCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_TotalSalesSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_TotalSalesSingle", companyRefParameter);
        }
    
        public virtual int usp_TransactionLoad(Nullable<long> cmp_Number, Nullable<long> brn_Number, string xmlInput)
        {
            var cmp_NumberParameter = cmp_Number.HasValue ?
                new ObjectParameter("Cmp_Number", cmp_Number) :
                new ObjectParameter("Cmp_Number", typeof(long));
    
            var brn_NumberParameter = brn_Number.HasValue ?
                new ObjectParameter("Brn_Number", brn_Number) :
                new ObjectParameter("Brn_Number", typeof(long));
    
            var xmlInputParameter = xmlInput != null ?
                new ObjectParameter("XmlInput", xmlInput) :
                new ObjectParameter("XmlInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_TransactionLoad", cmp_NumberParameter, brn_NumberParameter, xmlInputParameter);
        }
    
        public virtual ObjectResult<usp_TransExcludeZeroTotalBranch_Result> usp_TransExcludeZeroTotalBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransExcludeZeroTotalBranch_Result>("usp_TransExcludeZeroTotalBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_TransExcludeZeroTotalCompany_Result> usp_TransExcludeZeroTotalCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_TransExcludeZeroTotalCompany_Result>("usp_TransExcludeZeroTotalCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<usp_UniqueCustomersSeenBranch_Result> usp_UniqueCustomersSeenBranch(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<long> branchRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var branchRefParameter = branchRef.HasValue ?
                new ObjectParameter("branchRef", branchRef) :
                new ObjectParameter("branchRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UniqueCustomersSeenBranch_Result>("usp_UniqueCustomersSeenBranch", startParameter, endParameter, companyRefParameter, branchRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_UniqueCustomersSeenChanges(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_UniqueCustomersSeenChanges", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_UniqueCustomersSeenCompany_Result> usp_UniqueCustomersSeenCompany(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<long> companyRef, Nullable<int> timeType)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            var timeTypeParameter = timeType.HasValue ?
                new ObjectParameter("TimeType", timeType) :
                new ObjectParameter("TimeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UniqueCustomersSeenCompany_Result>("usp_UniqueCustomersSeenCompany", startParameter, endParameter, companyRefParameter, timeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> usp_UniqueCustomersSeenSingle(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("usp_UniqueCustomersSeenSingle", companyRefParameter);
        }
    
        public virtual int usp_UpdateCompanyAccessDetail(Nullable<System.DateTime> accessStart, Nullable<System.DateTime> accessEnd, Nullable<long> companyRef)
        {
            var accessStartParameter = accessStart.HasValue ?
                new ObjectParameter("accessStart", accessStart) :
                new ObjectParameter("accessStart", typeof(System.DateTime));
    
            var accessEndParameter = accessEnd.HasValue ?
                new ObjectParameter("accessEnd", accessEnd) :
                new ObjectParameter("accessEnd", typeof(System.DateTime));
    
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateCompanyAccessDetail", accessStartParameter, accessEndParameter, companyRefParameter);
        }
    
        public virtual int usp_UpdateIsAdminStatus(string userName, string status)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateIsAdminStatus", userNameParameter, statusParameter);
        }
    
        public virtual int usp_UpdateUserAccessDetail(Nullable<System.DateTime> accessStart, Nullable<System.DateTime> accessEnd, Nullable<int> status, string userRef)
        {
            var accessStartParameter = accessStart.HasValue ?
                new ObjectParameter("accessStart", accessStart) :
                new ObjectParameter("accessStart", typeof(System.DateTime));
    
            var accessEndParameter = accessEnd.HasValue ?
                new ObjectParameter("accessEnd", accessEnd) :
                new ObjectParameter("accessEnd", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserAccessDetail", accessStartParameter, accessEndParameter, statusParameter, userRefParameter);
        }
    
        public virtual int usp_UpdateUserProfile(string userRef, string name, string email, string phoneNumber)
        {
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("phoneNumber", phoneNumber) :
                new ObjectParameter("phoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateUserProfile", userRefParameter, nameParameter, emailParameter, phoneNumberParameter);
        }
    
        public virtual ObjectResult<usp_UserDropDownList_Result> usp_UserDropDownList(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_UserDropDownList_Result>("usp_UserDropDownList", companyRefParameter);
        }
    
        public virtual ObjectResult<usp_ViewableKpiList_Result> usp_ViewableKpiList(string userRef, Nullable<int> kpiType, string kpiTab)
        {
            var userRefParameter = userRef != null ?
                new ObjectParameter("userRef", userRef) :
                new ObjectParameter("userRef", typeof(string));
    
            var kpiTypeParameter = kpiType.HasValue ?
                new ObjectParameter("kpiType", kpiType) :
                new ObjectParameter("kpiType", typeof(int));
    
            var kpiTabParameter = kpiTab != null ?
                new ObjectParameter("kpiTab", kpiTab) :
                new ObjectParameter("kpiTab", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ViewableKpiList_Result>("usp_ViewableKpiList", userRefParameter, kpiTypeParameter, kpiTabParameter);
        }
    
        public virtual ObjectResult<string> usp_GetCompanyName(Nullable<long> companyRef)
        {
            var companyRefParameter = companyRef.HasValue ?
                new ObjectParameter("companyRef", companyRef) :
                new ObjectParameter("companyRef", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_GetCompanyName", companyRefParameter);
        }
    }
}
